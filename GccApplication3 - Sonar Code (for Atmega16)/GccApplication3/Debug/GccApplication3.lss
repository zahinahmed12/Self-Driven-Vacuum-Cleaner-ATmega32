
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000019e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000212  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  00000212  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000742  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000063b  00000000  00000000  000009ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002dd  00000000  00000000  00001025  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  00001304  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000371  00000000  00000000  0000134c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f1  00000000  00000000  000016bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000017ae  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  74:	0c 94 cd 00 	jmp	0x19a	; 0x19a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_1>:
static volatile int i1 = 0;
/*static volatile int pulse2 = 0;
static volatile int i2 = 0;*/

ISR(INT0_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	//timer read
	if(i1 == 1)
  8a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  8e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  92:	01 97       	sbiw	r24, 0x01	; 1
  94:	71 f4       	brne	.+28     	; 0xb2 <__vector_1+0x36>
	{
		pulse1 = TCNT1;
  96:	8c b5       	in	r24, 0x2c	; 44
  98:	9d b5       	in	r25, 0x2d	; 45
  9a:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <pulse1+0x1>
  9e:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <pulse1>
		TCCR1B = 0;
  a2:	1e bc       	out	0x2e, r1	; 46
		TCNT1 = 0;
  a4:	1d bc       	out	0x2d, r1	; 45
  a6:	1c bc       	out	0x2c, r1	; 44
		i1 = 0;
  a8:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <_edata+0x1>
  ac:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
  b0:	11 c0       	rjmp	.+34     	; 0xd4 <__vector_1+0x58>
	}
	//timer start
	else if(i1 == 0)
  b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  b6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
  ba:	89 2b       	or	r24, r25
  bc:	59 f4       	brne	.+22     	; 0xd4 <__vector_1+0x58>
	{
		//Anisha added (should be wrong)
		TCNT1 = 0;
  be:	1d bc       	out	0x2d, r1	; 45
  c0:	1c bc       	out	0x2c, r1	; 44
		TCCR1B |= (1<<CS10);
  c2:	8e b5       	in	r24, 0x2e	; 46
  c4:	81 60       	ori	r24, 0x01	; 1
  c6:	8e bd       	out	0x2e, r24	; 46
		i1 = 1;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  d0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
	}
}
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	0f 90       	pop	r0
  da:	0f be       	out	0x3f, r0	; 63
  dc:	0f 90       	pop	r0
  de:	1f 90       	pop	r1
  e0:	18 95       	reti

000000e2 <main>:
}*/


int main(void)
{
	DDRA = 0b11111111;
  e2:	8f ef       	ldi	r24, 0xFF	; 255
  e4:	8a bb       	out	0x1a, r24	; 26
	
	PORTA = 0x00;
  e6:	1b ba       	out	0x1b, r1	; 27
	/* Replace with your application code */
	
	uint32_t count_a = 0;
	//uint32_t count_b = 0;
	DDRD = 0b11110011;
  e8:	83 ef       	ldi	r24, 0xF3	; 243
  ea:	81 bb       	out	0x11, r24	; 17
	
	GICR |= (1<<INT0) /*| (1<<INT1)*/;
  ec:	8b b7       	in	r24, 0x3b	; 59
  ee:	80 64       	ori	r24, 0x40	; 64
  f0:	8b bf       	out	0x3b, r24	; 59
	MCUCR |= (1<<ISC00) /*| (1<<ISC10)*/;
  f2:	85 b7       	in	r24, 0x35	; 53
  f4:	81 60       	ori	r24, 0x01	; 1
  f6:	85 bf       	out	0x35, r24	; 53
	
	TCCR1A = 0;
  f8:	1f bc       	out	0x2f, r1	; 47
	sei();
  fa:	78 94       	sei
		PORTD &= ~(1<<PIND0)/* & ~(1<<PIND1)*/;
		_delay_ms(100);
		count_a = pulse1/58;
		//count_b = pulse2/58;
		
		if(count_a <= 30/* || count_b <= 30*/)
  fc:	2a e3       	ldi	r18, 0x3A	; 58
  fe:	30 e0       	ldi	r19, 0x00	; 0
		{
			count_a = 0;
			PORTA = 0b00000001;
 100:	41 e0       	ldi	r20, 0x01	; 1
	TCCR1A = 0;
	sei();
	
    while (1)
    {
		PORTD |= (1<<PIND0)/* | (1<<PIND1)*/;
 102:	90 9a       	sbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 104:	85 e0       	ldi	r24, 0x05	; 5
 106:	8a 95       	dec	r24
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x24>
	    _delay_us(15);
		PORTD &= ~(1<<PIND0)/* & ~(1<<PIND1)*/;
 10a:	90 98       	cbi	0x12, 0	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	87 ea       	ldi	r24, 0xA7	; 167
 10e:	91 e6       	ldi	r25, 0x61	; 97
 110:	01 97       	sbiw	r24, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <main+0x2e>
 114:	00 c0       	rjmp	.+0      	; 0x116 <main+0x34>
 116:	00 00       	nop
		_delay_ms(100);
		count_a = pulse1/58;
 118:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <pulse1>
 11c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <pulse1+0x1>
		//count_b = pulse2/58;
		
		if(count_a <= 30/* || count_b <= 30*/)
 120:	b9 01       	movw	r22, r18
 122:	0e 94 a5 00 	call	0x14a	; 0x14a <__divmodhi4>
 126:	cb 01       	movw	r24, r22
 128:	77 0f       	add	r23, r23
 12a:	aa 0b       	sbc	r26, r26
 12c:	bb 0b       	sbc	r27, r27
 12e:	4f 97       	sbiw	r24, 0x1f	; 31
 130:	a1 05       	cpc	r26, r1
 132:	b1 05       	cpc	r27, r1
 134:	10 f4       	brcc	.+4      	; 0x13a <main+0x58>
		{
			count_a = 0;
			PORTA = 0b00000001;
 136:	4b bb       	out	0x1b, r20	; 27
 138:	01 c0       	rjmp	.+2      	; 0x13c <main+0x5a>
		}
	    else
		{
			PORTA = 0b00000000;
 13a:	1b ba       	out	0x1b, r1	; 27
 13c:	87 ea       	ldi	r24, 0xA7	; 167
 13e:	91 e6       	ldi	r25, 0x61	; 97
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x5e>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x64>
 146:	00 00       	nop
 148:	dc cf       	rjmp	.-72     	; 0x102 <main+0x20>

0000014a <__divmodhi4>:
 14a:	97 fb       	bst	r25, 7
 14c:	07 2e       	mov	r0, r23
 14e:	16 f4       	brtc	.+4      	; 0x154 <__divmodhi4+0xa>
 150:	00 94       	com	r0
 152:	07 d0       	rcall	.+14     	; 0x162 <__divmodhi4_neg1>
 154:	77 fd       	sbrc	r23, 7
 156:	09 d0       	rcall	.+18     	; 0x16a <__divmodhi4_neg2>
 158:	0e 94 b9 00 	call	0x172	; 0x172 <__udivmodhi4>
 15c:	07 fc       	sbrc	r0, 7
 15e:	05 d0       	rcall	.+10     	; 0x16a <__divmodhi4_neg2>
 160:	3e f4       	brtc	.+14     	; 0x170 <__divmodhi4_exit>

00000162 <__divmodhi4_neg1>:
 162:	90 95       	com	r25
 164:	81 95       	neg	r24
 166:	9f 4f       	sbci	r25, 0xFF	; 255
 168:	08 95       	ret

0000016a <__divmodhi4_neg2>:
 16a:	70 95       	com	r23
 16c:	61 95       	neg	r22
 16e:	7f 4f       	sbci	r23, 0xFF	; 255

00000170 <__divmodhi4_exit>:
 170:	08 95       	ret

00000172 <__udivmodhi4>:
 172:	aa 1b       	sub	r26, r26
 174:	bb 1b       	sub	r27, r27
 176:	51 e1       	ldi	r21, 0x11	; 17
 178:	07 c0       	rjmp	.+14     	; 0x188 <__udivmodhi4_ep>

0000017a <__udivmodhi4_loop>:
 17a:	aa 1f       	adc	r26, r26
 17c:	bb 1f       	adc	r27, r27
 17e:	a6 17       	cp	r26, r22
 180:	b7 07       	cpc	r27, r23
 182:	10 f0       	brcs	.+4      	; 0x188 <__udivmodhi4_ep>
 184:	a6 1b       	sub	r26, r22
 186:	b7 0b       	sbc	r27, r23

00000188 <__udivmodhi4_ep>:
 188:	88 1f       	adc	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	5a 95       	dec	r21
 18e:	a9 f7       	brne	.-22     	; 0x17a <__udivmodhi4_loop>
 190:	80 95       	com	r24
 192:	90 95       	com	r25
 194:	bc 01       	movw	r22, r24
 196:	cd 01       	movw	r24, r26
 198:	08 95       	ret

0000019a <_exit>:
 19a:	f8 94       	cli

0000019c <__stop_program>:
 19c:	ff cf       	rjmp	.-2      	; 0x19c <__stop_program>
