
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000528  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800060  00800060  00000528  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d74  00000000  00000000  0000066c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006c7  00000000  00000000  000013e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000731  00000000  00000000  00001aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  000021d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000563  00000000  00000000  00002428  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000652  00000000  00000000  0000298b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00002fdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 c0 00 	jmp	0x180	; 0x180 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__vector_13>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 05 02 	call	0x40a	; 0x40a <main>
  74:	0c 94 58 02 	jmp	0x4b0	; 0x4b0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <init_pwm0_phase_mode_non_inverted>:
		data = UDR ;
	}       
	
	
	return data;
}
  7c:	81 e6       	ldi	r24, 0x61	; 97
  7e:	83 bf       	out	0x33, r24	; 51
  80:	bb 9a       	sbi	0x17, 3	; 23
  82:	08 95       	ret

00000084 <set_duty0_non_inverted>:
  84:	2f ef       	ldi	r18, 0xFF	; 255
  86:	82 9f       	mul	r24, r18
  88:	c0 01       	movw	r24, r0
  8a:	11 24       	eor	r1, r1
  8c:	64 e6       	ldi	r22, 0x64	; 100
  8e:	70 e0       	ldi	r23, 0x00	; 0
  90:	0e 94 0a 02 	call	0x414	; 0x414 <__divmodhi4>
  94:	6c bf       	out	0x3c, r22	; 60
  96:	08 95       	ret

00000098 <init_pwm2_phase_mode_non_inverted>:
  98:	81 e6       	ldi	r24, 0x61	; 97
  9a:	85 bd       	out	0x25, r24	; 37
  9c:	8f 9a       	sbi	0x11, 7	; 17
  9e:	08 95       	ret

000000a0 <set_duty2_non_inverted>:
  a0:	2f ef       	ldi	r18, 0xFF	; 255
  a2:	82 9f       	mul	r24, r18
  a4:	c0 01       	movw	r24, r0
  a6:	11 24       	eor	r1, r1
  a8:	64 e6       	ldi	r22, 0x64	; 100
  aa:	70 e0       	ldi	r23, 0x00	; 0
  ac:	0e 94 0a 02 	call	0x414	; 0x414 <__divmodhi4>
  b0:	63 bd       	out	0x23, r22	; 35
  b2:	08 95       	ret

000000b4 <init_motor_pins>:
  b4:	8a b3       	in	r24, 0x1a	; 26
  b6:	8f 60       	ori	r24, 0x0F	; 15
  b8:	8a bb       	out	0x1a, r24	; 26
  ba:	0e 94 3e 00 	call	0x7c	; 0x7c <init_pwm0_phase_mode_non_inverted>
  be:	0e 94 4c 00 	call	0x98	; 0x98 <init_pwm2_phase_mode_non_inverted>
  c2:	08 95       	ret

000000c4 <set_speed>:
  c4:	cf 93       	push	r28
  c6:	c6 2f       	mov	r28, r22
  c8:	81 11       	cpse	r24, r1
  ca:	04 c0       	rjmp	.+8      	; 0xd4 <set_speed+0x10>
  cc:	8b b3       	in	r24, 0x1b	; 27
  ce:	8c 7f       	andi	r24, 0xFC	; 252
  d0:	8b bb       	out	0x1b, r24	; 27
  d2:	0c c0       	rjmp	.+24     	; 0xec <set_speed+0x28>
  d4:	85 36       	cpi	r24, 0x65	; 101
  d6:	28 f4       	brcc	.+10     	; 0xe2 <set_speed+0x1e>
  d8:	d8 9a       	sbi	0x1b, 0	; 27
  da:	d9 98       	cbi	0x1b, 1	; 27
  dc:	0e 94 42 00 	call	0x84	; 0x84 <set_duty0_non_inverted>
  e0:	05 c0       	rjmp	.+10     	; 0xec <set_speed+0x28>
  e2:	d9 9a       	sbi	0x1b, 1	; 27
  e4:	d8 98       	cbi	0x1b, 0	; 27
  e6:	84 56       	subi	r24, 0x64	; 100
  e8:	0e 94 42 00 	call	0x84	; 0x84 <set_duty0_non_inverted>
  ec:	c1 11       	cpse	r28, r1
  ee:	04 c0       	rjmp	.+8      	; 0xf8 <set_speed+0x34>
  f0:	8b b3       	in	r24, 0x1b	; 27
  f2:	83 7f       	andi	r24, 0xF3	; 243
  f4:	8b bb       	out	0x1b, r24	; 27
  f6:	0e c0       	rjmp	.+28     	; 0x114 <set_speed+0x50>
  f8:	c5 36       	cpi	r28, 0x65	; 101
  fa:	30 f4       	brcc	.+12     	; 0x108 <set_speed+0x44>
  fc:	da 9a       	sbi	0x1b, 2	; 27
  fe:	db 98       	cbi	0x1b, 3	; 27
 100:	8c 2f       	mov	r24, r28
 102:	0e 94 50 00 	call	0xa0	; 0xa0 <set_duty2_non_inverted>
 106:	06 c0       	rjmp	.+12     	; 0x114 <set_speed+0x50>
 108:	db 9a       	sbi	0x1b, 3	; 27
 10a:	da 98       	cbi	0x1b, 2	; 27
 10c:	8c e9       	ldi	r24, 0x9C	; 156
 10e:	8c 0f       	add	r24, r28
 110:	0e 94 50 00 	call	0xa0	; 0xa0 <set_duty2_non_inverted>
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <UART_init>:
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	8b b9       	out	0x0b, r24	; 11
 11c:	88 e9       	ldi	r24, 0x98	; 152
 11e:	8a b9       	out	0x0a, r24	; 10
 120:	86 e8       	ldi	r24, 0x86	; 134
 122:	80 bd       	out	0x20, r24	; 32
 124:	8c e0       	ldi	r24, 0x0C	; 12
 126:	89 b9       	out	0x09, r24	; 9
 128:	10 bc       	out	0x20, r1	; 32
 12a:	08 95       	ret

0000012c <UART_send>:
 12c:	5d 9b       	sbis	0x0b, 5	; 11
 12e:	fe cf       	rjmp	.-4      	; 0x12c <UART_send>
 130:	8c b9       	out	0x0c, r24	; 12
 132:	08 95       	ret

00000134 <UART_send_string>:
	
	return data;
}*/

void UART_send_string(unsigned char* string)
{
 134:	cf 93       	push	r28
 136:	df 93       	push	r29
 138:	ec 01       	movw	r28, r24
	int i = 0;
	while(string[i] != '\0') {				//loop until NULL character
 13a:	88 81       	ld	r24, Y
 13c:	88 23       	and	r24, r24
 13e:	31 f0       	breq	.+12     	; 0x14c <UART_send_string+0x18>
 140:	21 96       	adiw	r28, 0x01	; 1
		UART_send(string[i]);				//sending a character
 142:	0e 94 96 00 	call	0x12c	; 0x12c <UART_send>
}*/

void UART_send_string(unsigned char* string)
{
	int i = 0;
	while(string[i] != '\0') {				//loop until NULL character
 146:	89 91       	ld	r24, Y+
 148:	81 11       	cpse	r24, r1
 14a:	fb cf       	rjmp	.-10     	; 0x142 <UART_send_string+0xe>
		UART_send(string[i]);				//sending a character
		i++;
	}
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <UART_receive_string>:

void UART_receive_string(unsigned char* string, int length)
{
 152:	ac 01       	movw	r20, r24
	unsigned char data;                   //character data for receiving a single character
	int i = 0;                            //loop control variable
	for(i=0;i<length;i++)                 //This loop receives a string of certain length from the user
 154:	16 16       	cp	r1, r22
 156:	17 06       	cpc	r1, r23
 158:	64 f4       	brge	.+24     	; 0x172 <UART_receive_string+0x20>
 15a:	fc 01       	movw	r30, r24
 15c:	9c 01       	movw	r18, r24
 15e:	26 0f       	add	r18, r22
 160:	37 1f       	adc	r19, r23
	{
		while((UCSRA&(1<<RXC))==0) ;      //waiting for the data to be received
 162:	5f 9b       	sbis	0x0b, 7	; 11
 164:	fe cf       	rjmp	.-4      	; 0x162 <UART_receive_string+0x10>
		data = UDR ;                      //data received
 166:	9c b1       	in	r25, 0x0c	; 12
		string[i]=data;
 168:	91 93       	st	Z+, r25

void UART_receive_string(unsigned char* string, int length)
{
	unsigned char data;                   //character data for receiving a single character
	int i = 0;                            //loop control variable
	for(i=0;i<length;i++)                 //This loop receives a string of certain length from the user
 16a:	e2 17       	cp	r30, r18
 16c:	f3 07       	cpc	r31, r19
 16e:	c9 f7       	brne	.-14     	; 0x162 <UART_receive_string+0x10>
 170:	02 c0       	rjmp	.+4      	; 0x176 <UART_receive_string+0x24>
 172:	60 e0       	ldi	r22, 0x00	; 0
 174:	70 e0       	ldi	r23, 0x00	; 0
		while((UCSRA&(1<<RXC))==0) ;      //waiting for the data to be received
		data = UDR ;                      //data received
		string[i]=data;
	}
	
	string[i]='\0';
 176:	fa 01       	movw	r30, r20
 178:	e6 0f       	add	r30, r22
 17a:	f7 1f       	adc	r31, r23
 17c:	10 82       	st	Z, r1
 17e:	08 95       	ret

00000180 <__vector_1>:
static volatile int cnt = 0;
volatile int last = 0;
unsigned char lspeed = 0, rspeed = 0;
unsigned char turnspeed = 0;

ISR(INT0_vect) {
 180:	1f 92       	push	r1
 182:	0f 92       	push	r0
 184:	0f b6       	in	r0, 0x3f	; 63
 186:	0f 92       	push	r0
 188:	11 24       	eor	r1, r1
 18a:	2f 93       	push	r18
 18c:	3f 93       	push	r19
 18e:	4f 93       	push	r20
 190:	5f 93       	push	r21
 192:	6f 93       	push	r22
 194:	7f 93       	push	r23
 196:	8f 93       	push	r24
 198:	9f 93       	push	r25
 19a:	af 93       	push	r26
 19c:	bf 93       	push	r27
 19e:	ef 93       	push	r30
 1a0:	ff 93       	push	r31
	
		set_speed(0,0);
 1a2:	60 e0       	ldi	r22, 0x00	; 0
 1a4:	80 e0       	ldi	r24, 0x00	; 0
 1a6:	0e 94 62 00 	call	0xc4	; 0xc4 <set_speed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	2f e3       	ldi	r18, 0x3F	; 63
 1ac:	8d e0       	ldi	r24, 0x0D	; 13
 1ae:	93 e0       	ldi	r25, 0x03	; 3
 1b0:	21 50       	subi	r18, 0x01	; 1
 1b2:	80 40       	sbci	r24, 0x00	; 0
 1b4:	90 40       	sbci	r25, 0x00	; 0
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <__vector_1+0x30>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <__vector_1+0x3a>
 1ba:	00 00       	nop
		_delay_ms(1000);
		
		set_speed(175,70);
 1bc:	66 e4       	ldi	r22, 0x46	; 70
 1be:	8f ea       	ldi	r24, 0xAF	; 175
 1c0:	0e 94 62 00 	call	0xc4	; 0xc4 <set_speed>
 1c4:	2f e7       	ldi	r18, 0x7F	; 127
 1c6:	88 e3       	ldi	r24, 0x38	; 56
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	21 50       	subi	r18, 0x01	; 1
 1cc:	80 40       	sbci	r24, 0x00	; 0
 1ce:	90 40       	sbci	r25, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <__vector_1+0x4a>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <__vector_1+0x54>
 1d4:	00 00       	nop
		_delay_ms(400);
		set_speed(turnspeed+5,turnspeed);
 1d6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 1da:	68 2f       	mov	r22, r24
 1dc:	8b 5f       	subi	r24, 0xFB	; 251
 1de:	0e 94 62 00 	call	0xc4	; 0xc4 <set_speed>
 1e2:	2f e3       	ldi	r18, 0x3F	; 63
 1e4:	8d e0       	ldi	r24, 0x0D	; 13
 1e6:	93 e0       	ldi	r25, 0x03	; 3
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <__vector_1+0x68>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <__vector_1+0x72>
 1f2:	00 00       	nop
		_delay_ms(1000);
		set_speed(0,0);
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	0e 94 62 00 	call	0xc4	; 0xc4 <set_speed>
 1fc:	2f e9       	ldi	r18, 0x9F	; 159
 1fe:	86 e8       	ldi	r24, 0x86	; 134
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	21 50       	subi	r18, 0x01	; 1
 204:	80 40       	sbci	r24, 0x00	; 0
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	e1 f7       	brne	.-8      	; 0x202 <__vector_1+0x82>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <__vector_1+0x8c>
 20c:	00 00       	nop
		_delay_ms(500);
		set_speed(rspeed,lspeed);
 20e:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <lspeed>
 212:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <rspeed>
 216:	0e 94 62 00 	call	0xc4	; 0xc4 <set_speed>
}
 21a:	ff 91       	pop	r31
 21c:	ef 91       	pop	r30
 21e:	bf 91       	pop	r27
 220:	af 91       	pop	r26
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	7f 91       	pop	r23
 228:	6f 91       	pop	r22
 22a:	5f 91       	pop	r21
 22c:	4f 91       	pop	r20
 22e:	3f 91       	pop	r19
 230:	2f 91       	pop	r18
 232:	0f 90       	pop	r0
 234:	0f be       	out	0x3f, r0	; 63
 236:	0f 90       	pop	r0
 238:	1f 90       	pop	r1
 23a:	18 95       	reti

0000023c <__vector_13>:

ISR(USART_RXC_vect) {
 23c:	1f 92       	push	r1
 23e:	0f 92       	push	r0
 240:	0f b6       	in	r0, 0x3f	; 63
 242:	0f 92       	push	r0
 244:	11 24       	eor	r1, r1
 246:	0f 93       	push	r16
 248:	1f 93       	push	r17
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
 26a:	60 97       	sbiw	r28, 0x10	; 16
 26c:	de bf       	out	0x3e, r29	; 62
 26e:	cd bf       	out	0x3d, r28	; 61
	unsigned char buffer[16];
	unsigned char ch = UDR;
 270:	8c b1       	in	r24, 0x0c	; 12
	if (ch == 'i') {
 272:	89 36       	cpi	r24, 0x69	; 105
 274:	b1 f4       	brne	.+44     	; 0x2a2 <__vector_13+0x66>
		MCUCR |= (1<<ISC00)|(1<<ISC01);
 276:	85 b7       	in	r24, 0x35	; 53
 278:	83 60       	ori	r24, 0x03	; 3
 27a:	85 bf       	out	0x35, r24	; 53
		UART_receive_string((const char*) buffer,3);
 27c:	63 e0       	ldi	r22, 0x03	; 3
 27e:	70 e0       	ldi	r23, 0x00	; 0
 280:	ce 01       	movw	r24, r28
 282:	01 96       	adiw	r24, 0x01	; 1
 284:	0e 94 a9 00 	call	0x152	; 0x152 <UART_receive_string>
		turnspeed  = atoi(buffer);
 288:	ce 01       	movw	r24, r28
 28a:	01 96       	adiw	r24, 0x01	; 1
 28c:	0e 94 32 02 	call	0x464	; 0x464 <atoi>
 290:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		init_motor_pins();
 294:	0e 94 5a 00 	call	0xb4	; 0xb4 <init_motor_pins>
		UDR = ch;
 298:	89 e6       	ldi	r24, 0x69	; 105
 29a:	8c b9       	out	0x0c, r24	; 12
		UDR = '\n';
 29c:	8a e0       	ldi	r24, 0x0A	; 10
 29e:	8c b9       	out	0x0c, r24	; 12
 2a0:	99 c0       	rjmp	.+306    	; 0x3d4 <__vector_13+0x198>
	}
	else if (ch == 's') {
 2a2:	83 37       	cpi	r24, 0x73	; 115
 2a4:	11 f5       	brne	.+68     	; 0x2ea <__vector_13+0xae>
		unsigned int x;
		UART_receive_string(buffer,3);
 2a6:	63 e0       	ldi	r22, 0x03	; 3
 2a8:	70 e0       	ldi	r23, 0x00	; 0
 2aa:	ce 01       	movw	r24, r28
 2ac:	01 96       	adiw	r24, 0x01	; 1
 2ae:	0e 94 a9 00 	call	0x152	; 0x152 <UART_receive_string>
		UART_send_string(buffer);
 2b2:	ce 01       	movw	r24, r28
 2b4:	01 96       	adiw	r24, 0x01	; 1
 2b6:	0e 94 9a 00 	call	0x134	; 0x134 <UART_send_string>
		x = atoi((const char*) buffer);
 2ba:	ce 01       	movw	r24, r28
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	0e 94 32 02 	call	0x464	; 0x464 <atoi>
		GICR |= (1<<INT0);
 2c2:	9b b7       	in	r25, 0x3b	; 59
 2c4:	90 64       	ori	r25, 0x40	; 64
 2c6:	9b bf       	out	0x3b, r25	; 59
		set_speed(x+5, 100+x);
 2c8:	04 e6       	ldi	r16, 0x64	; 100
 2ca:	08 0f       	add	r16, r24
 2cc:	15 e0       	ldi	r17, 0x05	; 5
 2ce:	18 0f       	add	r17, r24
 2d0:	60 2f       	mov	r22, r16
 2d2:	81 2f       	mov	r24, r17
 2d4:	0e 94 62 00 	call	0xc4	; 0xc4 <set_speed>
		lspeed = 100+x;
 2d8:	00 93 62 00 	sts	0x0062, r16	; 0x800062 <lspeed>
		rspeed = x+5;	
 2dc:	10 93 61 00 	sts	0x0061, r17	; 0x800061 <rspeed>
		UDR = 's';
 2e0:	83 e7       	ldi	r24, 0x73	; 115
 2e2:	8c b9       	out	0x0c, r24	; 12
		UDR = '\n';
 2e4:	8a e0       	ldi	r24, 0x0A	; 10
 2e6:	8c b9       	out	0x0c, r24	; 12
 2e8:	75 c0       	rjmp	.+234    	; 0x3d4 <__vector_13+0x198>
	}
	else if (ch == 'z') {
 2ea:	8a 37       	cpi	r24, 0x7A	; 122
 2ec:	81 f4       	brne	.+32     	; 0x30e <__vector_13+0xd2>
		set_speed(0, 0);
 2ee:	60 e0       	ldi	r22, 0x00	; 0
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 62 00 	call	0xc4	; 0xc4 <set_speed>
		lspeed = 0;
 2f6:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <lspeed>
		rspeed = 0;
 2fa:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <rspeed>
		GICR &= ~(1<<INT0);
 2fe:	8b b7       	in	r24, 0x3b	; 59
 300:	8f 7b       	andi	r24, 0xBF	; 191
 302:	8b bf       	out	0x3b, r24	; 59
		UDR = ch;
 304:	8a e7       	ldi	r24, 0x7A	; 122
 306:	8c b9       	out	0x0c, r24	; 12
		UDR = '\n';
 308:	8a e0       	ldi	r24, 0x0A	; 10
 30a:	8c b9       	out	0x0c, r24	; 12
 30c:	63 c0       	rjmp	.+198    	; 0x3d4 <__vector_13+0x198>
	}
	else if (ch == 'b') {
 30e:	82 36       	cpi	r24, 0x62	; 98
 310:	09 f5       	brne	.+66     	; 0x354 <__vector_13+0x118>
		unsigned int x;
		GICR |= (1<<INT0);
 312:	8b b7       	in	r24, 0x3b	; 59
 314:	80 64       	ori	r24, 0x40	; 64
 316:	8b bf       	out	0x3b, r24	; 59
		UART_receive_string(buffer,3);
 318:	63 e0       	ldi	r22, 0x03	; 3
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	ce 01       	movw	r24, r28
 31e:	01 96       	adiw	r24, 0x01	; 1
 320:	0e 94 a9 00 	call	0x152	; 0x152 <UART_receive_string>
		UART_send_string(buffer);
 324:	ce 01       	movw	r24, r28
 326:	01 96       	adiw	r24, 0x01	; 1
 328:	0e 94 9a 00 	call	0x134	; 0x134 <UART_send_string>
		x = atoi((const char*) buffer);
 32c:	ce 01       	movw	r24, r28
 32e:	01 96       	adiw	r24, 0x01	; 1
 330:	0e 94 32 02 	call	0x464	; 0x464 <atoi>
 334:	18 2f       	mov	r17, r24
		set_speed(105+x,x);
 336:	09 e6       	ldi	r16, 0x69	; 105
 338:	08 0f       	add	r16, r24
 33a:	68 2f       	mov	r22, r24
 33c:	80 2f       	mov	r24, r16
 33e:	0e 94 62 00 	call	0xc4	; 0xc4 <set_speed>
		lspeed = x;
 342:	10 93 62 00 	sts	0x0062, r17	; 0x800062 <lspeed>
		rspeed = 105+x;
 346:	00 93 61 00 	sts	0x0061, r16	; 0x800061 <rspeed>
		UDR = 'b';
 34a:	82 e6       	ldi	r24, 0x62	; 98
 34c:	8c b9       	out	0x0c, r24	; 12
		UDR = '\n';
 34e:	8a e0       	ldi	r24, 0x0A	; 10
 350:	8c b9       	out	0x0c, r24	; 12
 352:	40 c0       	rjmp	.+128    	; 0x3d4 <__vector_13+0x198>
	}
	else if (ch == 'l') {
 354:	8c 36       	cpi	r24, 0x6C	; 108
 356:	f9 f4       	brne	.+62     	; 0x396 <__vector_13+0x15a>
		unsigned int x;
		GICR |= (1<<INT0);
 358:	8b b7       	in	r24, 0x3b	; 59
 35a:	80 64       	ori	r24, 0x40	; 64
 35c:	8b bf       	out	0x3b, r24	; 59
		UART_receive_string(buffer,3);
 35e:	63 e0       	ldi	r22, 0x03	; 3
 360:	70 e0       	ldi	r23, 0x00	; 0
 362:	ce 01       	movw	r24, r28
 364:	01 96       	adiw	r24, 0x01	; 1
 366:	0e 94 a9 00 	call	0x152	; 0x152 <UART_receive_string>
		UART_send_string(buffer);
 36a:	ce 01       	movw	r24, r28
 36c:	01 96       	adiw	r24, 0x01	; 1
 36e:	0e 94 9a 00 	call	0x134	; 0x134 <UART_send_string>
		x = atoi((const char*) buffer);
 372:	ce 01       	movw	r24, r28
 374:	01 96       	adiw	r24, 0x01	; 1
 376:	0e 94 32 02 	call	0x464	; 0x464 <atoi>
 37a:	18 2f       	mov	r17, r24
		set_speed(0,x);
 37c:	68 2f       	mov	r22, r24
 37e:	80 e0       	ldi	r24, 0x00	; 0
 380:	0e 94 62 00 	call	0xc4	; 0xc4 <set_speed>
		lspeed = x;
 384:	10 93 62 00 	sts	0x0062, r17	; 0x800062 <lspeed>
		rspeed = 0;
 388:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <rspeed>
		UDR = 'b';
 38c:	82 e6       	ldi	r24, 0x62	; 98
 38e:	8c b9       	out	0x0c, r24	; 12
		UDR = '\n';
 390:	8a e0       	ldi	r24, 0x0A	; 10
 392:	8c b9       	out	0x0c, r24	; 12
 394:	1f c0       	rjmp	.+62     	; 0x3d4 <__vector_13+0x198>
	}
	else if (ch == 'r') {
 396:	82 37       	cpi	r24, 0x72	; 114
 398:	e9 f4       	brne	.+58     	; 0x3d4 <__vector_13+0x198>
		unsigned int x;
		GICR |= (1<<INT0);
 39a:	8b b7       	in	r24, 0x3b	; 59
 39c:	80 64       	ori	r24, 0x40	; 64
 39e:	8b bf       	out	0x3b, r24	; 59
		UART_receive_string(buffer,3);
 3a0:	63 e0       	ldi	r22, 0x03	; 3
 3a2:	70 e0       	ldi	r23, 0x00	; 0
 3a4:	ce 01       	movw	r24, r28
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	0e 94 a9 00 	call	0x152	; 0x152 <UART_receive_string>
		UART_send_string(buffer);
 3ac:	ce 01       	movw	r24, r28
 3ae:	01 96       	adiw	r24, 0x01	; 1
 3b0:	0e 94 9a 00 	call	0x134	; 0x134 <UART_send_string>
		x = atoi((const char*) buffer);
 3b4:	ce 01       	movw	r24, r28
 3b6:	01 96       	adiw	r24, 0x01	; 1
 3b8:	0e 94 32 02 	call	0x464	; 0x464 <atoi>
 3bc:	18 2f       	mov	r17, r24
		set_speed(x,0);
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	0e 94 62 00 	call	0xc4	; 0xc4 <set_speed>
		lspeed = 0;
 3c4:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <lspeed>
		rspeed = x;
 3c8:	10 93 61 00 	sts	0x0061, r17	; 0x800061 <rspeed>
		UDR = 'b';
 3cc:	82 e6       	ldi	r24, 0x62	; 98
 3ce:	8c b9       	out	0x0c, r24	; 12
		UDR = '\n';
 3d0:	8a e0       	ldi	r24, 0x0A	; 10
 3d2:	8c b9       	out	0x0c, r24	; 12
	}
}
 3d4:	60 96       	adiw	r28, 0x10	; 16
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	f8 94       	cli
 3da:	de bf       	out	0x3e, r29	; 62
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	cd bf       	out	0x3d, r28	; 61
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	ff 91       	pop	r31
 3e6:	ef 91       	pop	r30
 3e8:	bf 91       	pop	r27
 3ea:	af 91       	pop	r26
 3ec:	9f 91       	pop	r25
 3ee:	8f 91       	pop	r24
 3f0:	7f 91       	pop	r23
 3f2:	6f 91       	pop	r22
 3f4:	5f 91       	pop	r21
 3f6:	4f 91       	pop	r20
 3f8:	3f 91       	pop	r19
 3fa:	2f 91       	pop	r18
 3fc:	1f 91       	pop	r17
 3fe:	0f 91       	pop	r16
 400:	0f 90       	pop	r0
 402:	0f be       	out	0x3f, r0	; 63
 404:	0f 90       	pop	r0
 406:	1f 90       	pop	r1
 408:	18 95       	reti

0000040a <main>:


int main(void)
{

	PORTA = 0x00;
 40a:	1b ba       	out	0x1b, r1	; 27
	
	UART_init();
 40c:	0e 94 8c 00 	call	0x118	; 0x118 <UART_init>
	sei();
 410:	78 94       	sei
 412:	ff cf       	rjmp	.-2      	; 0x412 <main+0x8>

00000414 <__divmodhi4>:
 414:	97 fb       	bst	r25, 7
 416:	07 2e       	mov	r0, r23
 418:	16 f4       	brtc	.+4      	; 0x41e <__divmodhi4+0xa>
 41a:	00 94       	com	r0
 41c:	07 d0       	rcall	.+14     	; 0x42c <__divmodhi4_neg1>
 41e:	77 fd       	sbrc	r23, 7
 420:	09 d0       	rcall	.+18     	; 0x434 <__divmodhi4_neg2>
 422:	0e 94 1e 02 	call	0x43c	; 0x43c <__udivmodhi4>
 426:	07 fc       	sbrc	r0, 7
 428:	05 d0       	rcall	.+10     	; 0x434 <__divmodhi4_neg2>
 42a:	3e f4       	brtc	.+14     	; 0x43a <__divmodhi4_exit>

0000042c <__divmodhi4_neg1>:
 42c:	90 95       	com	r25
 42e:	81 95       	neg	r24
 430:	9f 4f       	sbci	r25, 0xFF	; 255
 432:	08 95       	ret

00000434 <__divmodhi4_neg2>:
 434:	70 95       	com	r23
 436:	61 95       	neg	r22
 438:	7f 4f       	sbci	r23, 0xFF	; 255

0000043a <__divmodhi4_exit>:
 43a:	08 95       	ret

0000043c <__udivmodhi4>:
 43c:	aa 1b       	sub	r26, r26
 43e:	bb 1b       	sub	r27, r27
 440:	51 e1       	ldi	r21, 0x11	; 17
 442:	07 c0       	rjmp	.+14     	; 0x452 <__udivmodhi4_ep>

00000444 <__udivmodhi4_loop>:
 444:	aa 1f       	adc	r26, r26
 446:	bb 1f       	adc	r27, r27
 448:	a6 17       	cp	r26, r22
 44a:	b7 07       	cpc	r27, r23
 44c:	10 f0       	brcs	.+4      	; 0x452 <__udivmodhi4_ep>
 44e:	a6 1b       	sub	r26, r22
 450:	b7 0b       	sbc	r27, r23

00000452 <__udivmodhi4_ep>:
 452:	88 1f       	adc	r24, r24
 454:	99 1f       	adc	r25, r25
 456:	5a 95       	dec	r21
 458:	a9 f7       	brne	.-22     	; 0x444 <__udivmodhi4_loop>
 45a:	80 95       	com	r24
 45c:	90 95       	com	r25
 45e:	bc 01       	movw	r22, r24
 460:	cd 01       	movw	r24, r26
 462:	08 95       	ret

00000464 <atoi>:
 464:	fc 01       	movw	r30, r24
 466:	88 27       	eor	r24, r24
 468:	99 27       	eor	r25, r25
 46a:	e8 94       	clt
 46c:	21 91       	ld	r18, Z+
 46e:	20 32       	cpi	r18, 0x20	; 32
 470:	e9 f3       	breq	.-6      	; 0x46c <atoi+0x8>
 472:	29 30       	cpi	r18, 0x09	; 9
 474:	10 f0       	brcs	.+4      	; 0x47a <atoi+0x16>
 476:	2e 30       	cpi	r18, 0x0E	; 14
 478:	c8 f3       	brcs	.-14     	; 0x46c <atoi+0x8>
 47a:	2b 32       	cpi	r18, 0x2B	; 43
 47c:	41 f0       	breq	.+16     	; 0x48e <atoi+0x2a>
 47e:	2d 32       	cpi	r18, 0x2D	; 45
 480:	39 f4       	brne	.+14     	; 0x490 <atoi+0x2c>
 482:	68 94       	set
 484:	04 c0       	rjmp	.+8      	; 0x48e <atoi+0x2a>
 486:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__mulhi_const_10>
 48a:	82 0f       	add	r24, r18
 48c:	91 1d       	adc	r25, r1
 48e:	21 91       	ld	r18, Z+
 490:	20 53       	subi	r18, 0x30	; 48
 492:	2a 30       	cpi	r18, 0x0A	; 10
 494:	c0 f3       	brcs	.-16     	; 0x486 <atoi+0x22>
 496:	1e f4       	brtc	.+6      	; 0x49e <atoi+0x3a>
 498:	90 95       	com	r25
 49a:	81 95       	neg	r24
 49c:	9f 4f       	sbci	r25, 0xFF	; 255
 49e:	08 95       	ret

000004a0 <__mulhi_const_10>:
 4a0:	7a e0       	ldi	r23, 0x0A	; 10
 4a2:	97 9f       	mul	r25, r23
 4a4:	90 2d       	mov	r25, r0
 4a6:	87 9f       	mul	r24, r23
 4a8:	80 2d       	mov	r24, r0
 4aa:	91 0d       	add	r25, r1
 4ac:	11 24       	eor	r1, r1
 4ae:	08 95       	ret

000004b0 <_exit>:
 4b0:	f8 94       	cli

000004b2 <__stop_program>:
 4b2:	ff cf       	rjmp	.-2      	; 0x4b2 <__stop_program>
